# frozen_string_literal: true

module Tmm
  class FileService
    def self.add(doc:, file:, kind:)
      user = User.find_by(email: doc['depositor_tesim'].first)
      monograph = Monograph.find(doc.id)
      uploaded_file = Hyrax::UploadedFile.create(file: File.new(file), user: user)
      attrs = {}
      attrs[:import_uploaded_files_ids] = [uploaded_file.id]
      attrs[:import_uploaded_files_attributes] = [files_attributes(kind)]
      Hyrax::CurationConcern.actor.update(Hyrax::Actors::Environment.new(monograph, Ability.new(user), attrs))
    end

    def self.replace(file_set_id:, new_file_path:)
      file_set = FileSet.find file_set_id
      Hydra::Works::AddFileToFileSet.call(file_set, File.open(new_file_path), :original_file)
      CharacterizeJob.perform_later(file_set, file_set.original_file.id, nil)
    end

    def self.replace?(file_set_id:, new_file_path:)
      presenter = Hyrax::PresenterFactory.build_for(ids: [file_set_id], presenter_class: Hyrax::FileSetPresenter, presenter_args: nil).first
      return false if presenter.blank?
      return false if presenter.original_checksum.blank?
      # The original file_set checksum we're using has been generated by Fedora,
      # not ActiveFedora or anything in the Samvera ruby stack (that I can tell...).
      # I imagine this is fine since an MD5 is an MD5 the world around.
      return false if Digest::MD5.file(new_file_path).hexdigest == presenter.original_checksum.first
      true
    end

    def self.files_attributes(kind)
      case kind
      when :cover
        { representative_kind: 'cover' }
      when :epub
        { allow_download: 'yes', representative_kind: 'epub' }
      when :pdf
        { allow_download: 'yes', representative_kind: 'pdf_ebook' }
      end
    end
  end
end
