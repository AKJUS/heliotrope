<% provide :page_title, @title || "Title" %>
<%# https://github.com/mlibrary/heliotrope/issues/1228 %>
<% content_for :head do %>
  <meta name="turbolinks-cache-control" content="no-cache">
  <script type="text/javascript" src="https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js"></script>
  <% if @monograph_presenter.doi.present? %>
    <script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>
  <% end %>
  <% if defined? @subdomain %>
    <%# only include hypothes.is for leverpress at this point %>
    <% if %w[leverpress].include? @subdomain %>
    <!-- hypothes.is -->
      <script type="text/javascript">
        window.hypothesisConfig = function () {
          return {
            openSidebar: false,
            theme: 'classic', // "clean" or "classic"
            enableMultiFrameSupport: true,
            onLayoutChange: function(state) {
              var $frame = $('.annotator-frame');
              var $reader = $("#reader");
            },
            externalContainerSelector: '.hypothesis-panel',
            enableExperimentalNewNoteButton: true
          };
        };
      </script>
      <script src="https://cdn.hypothes.is/hypothesis"></script>
    <% end %>
  <% end %>
  <% if @monograph_presenter.webgl? %>
    <%
# load what we need to show the webgl/3-d model if needed
webgl_id = @monograph_presenter.webgl_id
webgl = Webgl::Unity.from_directory(UnpackService.root_path_from_noid(webgl_id, 'webgl'))
@unity_loader = "/webgl/#{webgl_id}/#{webgl.unity_loader}"
@unity_json = "/webgl/#{webgl_id}/#{webgl.unity_json}"
    %>
       <!-- browser detection here -->
     <script src="<%= @unity_loader %>"></script>
	   <script>
 	   // this has to go right after @unity_loader is loaded to guarantee no random JS errors get alert-boxed
      	UnityLoader.Error.handler = function(e, t){
          // NOP to stop the nuisance alert boxes for *all* (even non-Unity) JS errors
        }
	   </script>
  <% end %>
<% end %>

<% provide :body do %>
  <% if defined? @presenter.file_set_coins_title %>
    <span class="Z3988" title="<%= @presenter.file_set_coins_title %>"></span>
  <% end %>
  <div class="skip"></div>
  <div id="epub" class="<%= @subdomain %>">
    <div id="reader"></div>

    <% if %w[leverpress].include? @subdomain %>
    <%# annotation widget counter %>
      <div class="hypothesis-panel" style="display:none;"></div>
    <% end %>

    <script type="text/javascript">
      if ( true ) {
        
        <% if %w[leverpress].include? @subdomain %>
          // Create custom Annotator tool that is aware of its state
          AnnotationTool = cozy.Control.Widget.Toggle.extend({
            defaultTemplate: '<button class="button--sm annotation" data-toggle="button" aria-label="Open Annotations"><i class="fa fa-pencil" title="Open and close annotation panel" aria-hidden="true"></i></button><div class="annotation-count" data-hypothesis-annotation-count></div>',
          

            initialize: function(options) {

              cozy.Control.Widget.Toggle.prototype.initialize.apply(this, arguments);

              this.options.states = [{
                stateName: 'open-annotator',
                onClick: this.closeAnnotator.bind(this)
              },
              {
                stateName: 'close-annotator',
                onClick: this.openAnnotator.bind(this)
              }];
            },

            _onAddExtra: function(container) {
              // super._onAddExtra(container);
              cozy.Control.Widget.Toggle.prototype._onAddExtra.apply(this, arguments);
              this.setupHook();
              return container;
            },

            openAnnotator: function(self, reader) {
              this.options.$panel.parents("body").addClass("panel-open");
              this.options.$panel.show();
              self.state('open-annotator');
            },

            closeAnnotator: function(self, reader) {
              this.options.$panel.hide();
              this.options.$panel.parents("body").removeClass("panel-open");
              self.state('close-annotator');
            },

            setupHook: function() {
              var reader = this._reader;
              reader.rendition.hooks.content.register(function(contents, view) {
                contents.window.addEventListener('scrolltorange', function (e) {
                  var range = e.detail;
                  var cfi = new reader.CFI(range, contents.cfiBase).toString();
                  if (cfi) {
                    reader.gotoPage(cfi);
                  }
                  e.preventDefault();
                });
              })
            } 
          })
        <% end %>

        // Configure and initiate reader
        var reader = cozy.reader('reader', {
          href: "<%= "#{main_app.epub_url.gsub!(/\?.*/, '')}/" %>",
          skipLink: '.skip',
          useArchive: <%= @use_archive %>,
          download_links: <%= @ebook_download_presenter.csb_download_links.to_json.html_safe %>,
          loader_template: '<div class="fulcrum-loading"><div class="rect rect1"></div><div class="circle circ1"></div><div class="rect rect2"></div><div class="circle circ2"></div></div>',
          <% if %w[michigan].include? @subdomain %>
          injectStylesheet: '/css/fulcrum_enhanced_display.css',
          <% end %>
          metadata: {
            doi: '<%= @citable_link %>',
            location: 'Ann Arbor, MI'
          }
        });

        // Close reader/Return to previous screen widget
        cozy.control.widget.button({
          region: 'top.header.left',
          data: { label: '<i class="icon-x oi" data-glyph="x" aria-hidden="true"></i>'},
          template: '<button class="button--sm cozy-close" data-toggle="button" data-slot="label" aria-label="Close reader"></button>',
          onClick: function() { window.location = "<%= "#{@back_link}" %>"; }
        }).addTo(reader);
        
        // Press brand widget
        // TODO: only show logo for publishers that also have CSS overrides.
        <% if defined? @subdomain %>
        // only include logos for heb, nyupress, leverpress, rekihaku, sussex and gabii at this point
          <% if %w[heb nyupress gabii michigan leverpress rekihaku sussex].include? @subdomain %>
            cozy.control.widget.panel({
              region: 'top.header.left',
              template: '<div class="logo"><%= link_to (image_tag logo(@subdomain), role: 'link', alt: @subdomain + ' catalog on Fulcrum'), URI.join(main_app.root_url, @subdomain).to_s %>',
              data: { title: "<%= @subdomain %>" }
            }).addTo(reader);
          <% end %>
        <% end %>
        
        // Book/chapter title widget
        cozy.control.title({ region: 'top.header.left' }).addTo(reader);

        // Altmetric and Dimensions widgets
        cozy.control.widget.panel({
          region: 'top.header.right',
          className: 'cozy-container-altmetric',
          template: '<div data-badge-popover="bottom" data-badge-type="1" data-isbn="<%= @monograph_presenter.isbn_noformat.first %>" data-hide-no-mentions="true" class="altmetric-embed"></div>',
        }).addTo(reader);

        <% if @monograph_presenter.doi.present? %>
          cozy.control.widget.panel({
            region: 'top.header.right',
            className: 'cozy-container-dimensions',
            template: '<span class="__dimensions_badge_embed__" data-doi="<%= @monograph_presenter.doi_path %>" data-hide-zero-citations="true" data-legend="hover-bottom" data-style="large_rectangle"></span>',
          }).addTo(reader);
        <% end %>

        // MOBILE ONLY
        // Close reader/Return to previous screen widget
        cozy.control.widget.button({
          region: 'top.toolbar.left',
          data: { label: '<i class="icon-x oi" data-glyph="x" aria-hidden="true"></i>'},
          template: '<button class="button--sm cozy-close mobile" data-toggle="button" data-slot="label" aria-label="Close reader"></button>',
          onClick: function() { window.location = "<%= "#{@back_link}" %>"; }
        }).addTo(reader);

        // Table of contents widget
        cozy.control.contents({ region: 'top.toolbar.left', skipLink: '.skip' }).addTo(reader);

        // Webgl/3-D model
        <% if @monograph_presenter.webgl? %>

        var gameInstance;
        var gameReady = false;

        // a flag to allow the panel to be open with `a11y_on` the first time only for users with an incompatible...
        // device or browser (heliotropeIncompatibleWebGlUser === true)
        var firstLaunchWebGlEpub = false;

        // load the game on launch of e-reader
        reader.on('ready', function() {
          // open_panel();
          // the a11y state disables the "3D MODEL" button and hides the WebGL panel. These are things we want for...
          // incompatible device/browser users also, but initially we *do* want them to see the panel with the...
          // incompatibility message as an "easy" way to inform them about the problem (firstLaunchWebGlEpub flag)
          if(heliotropeIncompatibleWebGlUser === true) {
            firstLaunchWebGlEpub = true;
            a11y_on();
          }
        })

        // open panel function and initiate game if not initiated
        var open_panel = function() {
          var $main = $(".cozy-module-main");
          var $book = $(".cozy-module-book-cover");
          close_panel();
          $("body").addClass("panel-open panel-right");

          var $panel = $('.special-panel');

          if (! $panel.length) {

            var mobileUserMessage = '';
            if(heliotropeIncompatibleWebGlUser === true) {
              mobileUserMessage = '<div id="epub-webgl-mobile-message">Sorry, it looks like your device or browser is not compatible with WebGL.<br />Please check our <a href="https://hdl.handle.net/2027/fulcrum.9231782/about">compatibility requirements</a>.</div>';
            }

            var $panelContent =
              '<div class="special-panel" aria-hidden="false">' +
                '<div class="panel-control">' +
                  '<button class="button--sm webgl-close" data-toggle="button" data-slot="label" aria-label="Close 3-D Model" onclick="close_panel();">' +
                    '<i class="icon-x oi" data-glyph="x" aria-hidden="true"></i>' +
                  '</button>' +
                '</div>' +
                '<div class="webgl-content">' +
                  '<div id="gameContainer" tabindex="0">' +
                    mobileUserMessage +
                  '</div>' +
                '</div>' +
                '<div class="panel-info">' +
                  '<h2>Gabii Area B 3D Model</h2>' +
                  '<p><strong>DOI: https://doi.org/10.3998/mpub.9231782.model</strong></p>' +
                  '<p>This interactive section of the publication includes 3D models, descriptions, and links to the online database, and complements the narrative text. Interaction with this content is essential to engaging with our interpretation of the Tincu house. Readers are encouraged both to follow the narrative laid out in the text through the model and data, and to explore the 3D content and database freely.' +
                  '</p>' +
                '</div>' +
              '</div>';
            $panel = $($panelContent).appendTo($main);
          } else {
            $panel.show();
            $('.special-panel').prop('hidden', false);
            $('.special-panel').attr('aria-hidden', 'false');
          }

          // mobile users won't be loading the 3D content so this stuff isn't required
          if (heliotropeIncompatibleWebGlUser === false) {
            var options = {};

            var h = $panel.height();
            var w = $panel.width();

            // the game has to have a specific aspect ratio or it looks distorted
            var r = w / 1024;
            options.width = w + 'px';
            options.height = Math.ceil(600 * r) + 'px';

            if (!gameInstance) {
              gameInstance = UnityLoader.instantiate("gameContainer", "<%= "#{@unity_json}" %>", options);
            } else {
              // resize the webGL canvas
              resize_webgl();
            }
          }

          // resize EPUB
          setTimeout(function() {
            window.dispatchEvent(new Event('resize'));
          }, 0);

          panel_toggle.state('close-webgl');
        } // end open_panel

        // close panel function
        var close_panel = function() {
          var $panel = $('.special-panel');
          if ($panel.length) {
            $('.special-panel').hide();
            $('body').removeClass('panel-open');
            $('body').removeClass('panel-right');
            $('.special-panel').prop('hidden', true);
            $('.special-panel').attr('aria-hidden', 'true');
            setTimeout(function() {
              window.dispatchEvent(new Event('resize'));
            }, 0);
          }
          panel_toggle.state('open-webgl');
        }

        // resize the webGL canvas
        var resize_webgl = function() {
          var $panel= $(".special-panel");
          var h = $panel.height();
          var w = $panel.width();

          var r = w / 1024;
          var width = w + 'px';
          var height = Math.ceil(600 * r) + 'px';

          var $g = $('#gameContainer');
          $g.css({ width: width, height: height });
          var $c = $g.find('canvas').get(0);
          $c.setAttribute('width', parseInt(width));
          $c.setAttribute('height', parseInt(height));
        }

        // dynamic WebGL canvas resizing
        reader.on('resized', function() {
          // mobile users shouldn't have a canvas to resize
          if (gameReady && heliotropeIncompatibleWebGlUser === false) {
            resize_webgl();
          }
        })

        // Open SU panel in WebGL if SU link is clicked
        // If in a11y mode, open database record
        var click_handler = function(event) {
          var s = event.target.getAttribute('data-uid');
          if ($('body').hasClass('a11y')) {
            window.open('https://doi.org/10.3998/gabii.1.' + s, '_blank');
          } else {
            var SendMessage = gameInstance.SendMessage;
            var $panel= $(".special-panel");
            function getToUnity(s) {
              SendMessage("WebCommunicator", "ShowString", s);
            };
            var gameContainerDiv = document.getElementById("gameContainer");
            if ($('body').hasClass('panel-open')) {
              FocusCanvas("1");
              gameContainerDiv.focus();
              getToUnity(s);
            } else {
              open_panel();
              FocusCanvas("1");
              gameContainerDiv.focus();
              getToUnity(s);
            }
          }
        };

        // Setup SU link event listener
        reader.on('ready:contents', function(contents) {
          var links = contents.content.querySelectorAll("a[data-uid]");
          for(var i =0, n = links.length; i < n; i++) {
            var link = links[i];
            link.addEventListener('click', click_handler);
          }
        })

        // Toggling focus of canvas - if clicked on canvas, focus
        // if clicked outside of canvas, remove focus
        // if tab advance after focusing canvas, remove canvas focus
        function GameControlReady () {
          gameReady = true;
        }

        function FocusCanvas(focus) {
          if (gameReady) {
            var SendMessage = gameInstance.SendMessage;
            SendMessage("GameControl", "FocusCanvas", focus);
          }
        }

        document.addEventListener('click', function(e) {
          if (e.target.id == "#canvas") {
            // Clicked on canvas
            FocusCanvas("1");
              } else {
            // Clicked outside of canvas
            FocusCanvas("0");
          }
        });

        document.addEventListener('keydown', function(event) {
          if (event.defaultPrevented) {
            return; // Do nothing if the event was already processed
          }

          switch (event.key) {
            case "Tab":
              FocusCanvas("0");
            break;
            default:
            return;
          }

        }, true);

        // POI to CFI webgl -> epub mapping stuff
        var poiToCfiMap = {};

        var fetch_poi = function() {
          $.get("<%= "#{epub_file_path(id: @presenter.id, file: 'epub-webgl-map.json')}" %>", function(data) {
            data.forEach(function(map) {
              poiToCfiMap[map['poi']] = map['cfi']
            })
          });
        }
        // Take user to a POI when passed a string from WebGL
        function goToParagraph(p) {
          var par = "par" + p;
          if (poiToCfiMap[par]) {
            console.log("CFI " + poiToCfiMap[par] + " found for POI " + par);
            reader.gotoPage('epubcfi(' + poiToCfiMap[par] + ')');
          } else {
            console.log("No CFI found for POI " + par);
          };
        }

        // 3D model toggler
        var panel_toggle = cozy.control.widget.toggle({
          region: 'top.toolbar.left',
          template: '<button class="button--sm" id="webgl" data-toggle="button" aria-label="3D Model">3D Model</button>',
          states: [{
            stateName: 'open-webgl',
            onClick: function(btn, reader) {
              open_panel();
              btn.state('close-webgl');
            }
          },
            {
              stateName: 'close-webgl',
              onClick: function(btn, reader) {
                close_panel();
                btn.state('open-webgl');
              }
            }],
        })
        panel_toggle.addTo(reader);

        // accessibility mode on/off
        var a11y_on = function() {
          $('body').addClass('a11y');
          $('#webgl').attr('aria-disabled', 'true');
          $('#webgl').prop('disabled', true);
          // a flag (set above) to allow the WebGL panel, with an incompatibility message, to be open with a11y_on...
          // mode on initial load *only* for users with an incompatible device/browser
          if(firstLaunchWebGlEpub === true)
            firstLaunchWebGlEpub = false;
          else if($('.special-panel').prop('hidden') == false) // the user might have closed this manually
            close_panel();
        }

        var a11y_off = function() {
          $('body').removeClass('a11y');
          $('.toggle-a11y').removeClass('on');
          $('#webgl').attr('aria-disabled', 'false');
          $('#webgl').prop('disabled', false);

          open_panel();
        }

        <% else %>
        // no-op for epubs without a webgl (so... almost all of them)
        var fetch_poi = function() { }
        <% end %>

        // Database
        // This is a very specific case of an externally hosted database that is related to the epub
        <% if @monograph_presenter.database? %>
        cozy.control.widget.button({
          region: 'top.toolbar.left',
          template: '<button class="button--sm" data-toggle="button" aria-label="Database">Database</button>',
          onClick: function() { window.location = "<%= "#{@monograph_presenter&.database&.external_resource_url}" %>"; }
        }).addTo(reader);
        <% end %>

        // Resources
        <% if @monograph_presenter.assets? %>
        cozy.control.widget.button({
          region: 'top.toolbar.left',
          template: '<button class="button--sm media" data-toggle="button" aria-label="Resources">Resources</button>',
          onClick: function() { window.location = "<%= "#{main_app.monograph_catalog_url(@presenter.monograph_id) + '#resources'}" %>"; }
        }).addTo(reader);
        <% end %>

        // Permalink widget
        cozy.control.widget.panel({
          region: 'top.toolbar.left',
          data: { title: "<%= @citable_link %>"},
          template: '<div class="permalink-label"><label class="u-screenreader" for="permalink">Permalink</label><form><input data-slot="title" type="text" id="permalink" aria-label="citable link" value="" readonly="readonly" onclick="this.select(); document.execCommand(\'copy\');"></form></div>',
        }).addTo(reader);

        <% if @monograph_presenter.citations_ready? %>
        // Citation widget
        // see: https://github.com/mlibrary/cozy-sun-bear/wiki/Metadata-and-Citations
        var my_citations = [
          {format: 'MLA', text: "<%= export_as_mla_citation(@monograph_presenter).gsub('"', '\"').html_safe %>" },
          {format: 'APA', text: "<%= export_as_apa_citation(@monograph_presenter).gsub('"', '\"').html_safe %>" },
          {format: 'Chicago', text: "<%= export_as_chicago_citation(@monograph_presenter).gsub('"', '\"').html_safe %>" }
        ]
        cozy.control.citation({ region: 'top.toolbar.left', citations: my_citations }).addTo(reader);
        <% end %>

        // Search widget
        <% unless Heliotrope::Application.config.cozy_epub_engine == 'readium' %>
        cozy.control.search({
          region: 'top.toolbar.left',
          searchUrl: "<%= @search_url %>"
        }).addTo(reader);
        <% end %>

        // Share widget
        cozy.control.widget.button({
          region: 'top.toolbar.left',
          template: '<%= @monograph_presenter.social_share_widget_template %>'
        }).addTo(reader);

        // Download widget
        <% if @ebook_download_presenter.csb_download_links.length.positive? && @share_link.nil? %>
        cozy.control.download({
            region: 'top.toolbar.left',
            template: '<button class="button--sm cozy-download" data-toggle="open" aria-label="Download book" role="button"><i id="download" class="oi" data-glyph="data-transfer-download" title="Download book" aria-hidden="true"></i></button>',
        }).addTo(reader);
        <% end %>

        // Restricted Share Link widget
        <% if @component.present? && @press.allow_share_links? && !@monograph_presenter.open_access? && @share_link.nil? %>
        modal = reader.modal({
                region: 'left',
                title: 'Share Temporary Access to this Book',
                template: '<p>The following URL can be shared with non-subscribing users to provide them with temporary access to this restricted work for 28 days:</p> <blockquote id="share-link" style="padding: 8px; border-left: 4px solid black; background-color: #fff; word-wrap:break-word;"></blockquote><p>The URL can be copied to your clipboard using the button below or manually copied by highlighting the text.</p><p>After 28 days the link will expire and no longer work.</p><div class="alert alert-info" id="message" style="display: none"></div>',
                fraction: 0.5,
                actions: [
                  {
                    label: 'Copy Link',
                    callback: function(event) {
                      document.designMode = "on";
                      var link = self.modal._container.querySelector("#share-link");
                      var message = self.modal._container.querySelector("#message");

                      var range = document.createRange();
                      range.selectNode(link);
                      var sel = window.getSelection();
                      sel.removeAllRanges();
                      sel.addRange(range);

                      // formatted.select();

                      try {
                        var flag = document.execCommand('copy');
                      } catch(err) {
                        console.log("AHOY COPY FAILED", err);
                      }

                      self.message.innerHTML = 'Success! Share link copied to your clipboard.';
                      self.message.style.display = 'block';
                      sel.removeAllRanges();
                      range.detach();
                      document.designMode = "off";
                    }
                  }
                ]
            })

        // Share widget
        cozy.control.widget.button({
          region: 'top.toolbar.left',
          template: '<button id="share-link-btn" class="button--sm cozy-share" data-toggle="button" data-slot="label" aria-label="Share a Readable Version"><i class="oi" data-glyph="link-intact" title="Share a Readable Version" aria-hidden="true"></i></button>',
          onClick: function() {
            $.get("<%= "#{epub_share_link_path(id: @presenter.id)}" %>", function(data) {
              console.log("SHARE_LINK:", data);
              if (data) {
                var bq = modal._container.querySelector("#share-link");
                bq.innerText = data;
                modal.activate();
              }
            });
          }
        }).addTo(reader);
        <% end %>

        // Fullscreen widget
        cozy.control.widget.button({
          region: 'top.toolbar.right',
          className: 'cozy-container-fullscreen',
          template: '<button class="button--sm" data-toggle="button" data-slot="label" aria-label="Full screen"></button>',
          data: { label: '<i id="fullscreen" class="icon-fullscreen-enter oi" data-glyph="fullscreen-enter" title="Fullscreen Mode" aria-hidden="true"></i>' },
          onClick: function() {
            reader.requestFullscreen();
            if (!window.screenTop && !window.screenY) {
              $('#fullscreen').attr('data-glyph', 'fullscreen-enter');
            } else {
              $('#fullscreen').attr('data-glyph', 'fullscreen-exit');
            }
          }
        }).addTo(reader);

        // Reading preferences widget - webgl gets custom preferences
        <% if @monograph_presenter.webgl? %>
        // Add accessibility mode to preferences
        cozy.control.preferences({
          region: 'top.toolbar.right',
          fields: [
            {
              label: 'Accessibility Mode',
              name: 'accessibility-mode',
              inputs: [
                { value: 'off', label: 'Off' },
                { value: 'on', label: 'On'}
              ],
              value: heliotropeIncompatibleWebGlUser === true ? 'on' : 'off',
              callback: function(value) {
                if (value == 'on') {
                  a11y_on();
                } else {
                  a11y_off();
                }
              },
              hint: 'When Accessibility Mode is "On", the publication is read without the 3D model. All links to stratigraphic units point to external database records.'
            }
          ]
        }).addTo(reader);
        <% else %>
        cozy.control.preferences({ region: 'top.toolbar.right' }).addTo(reader);
        <% end %>

        // Paging widgets
        cozy.control.pagePrevious({ region: 'left.sidebar' }).addTo(reader);
        cozy.control.pageNext({ region: 'right.sidebar' }).addTo(reader);

        // Feedback widget
        cozy.control.widget.panel({
          region: 'bottom.navigator.left',
          className: 'cozy-panel-feedback',
          <% if @monograph_presenter.webgl? %>
          template: '<a href="https://docs.google.com/forms/d/e/1FAIpQLSehtWeYRAmb12pLcQV0WXDvsQgdEsI6H-gbj4HumdySrmwhZg/viewform?usp=sf_link" target="_blank" title="Report a problem or share feedback"><i class="icon-comment-square oi" data-glyph="comment-square" aria-hidden="true"></i></a>',
          <% else %>
          template: '<a href="https://umich.qualtrics.com/jfe/form/SV_3KSLynPij0fqrD7?publisher=<%= @subdomain %>&noid=<%= @presenter.id %>&title=<%= @monograph_presenter.page_title %>&url=<%= request.original_url %>" target="_blank" title="Report a problem or share feedback"><i class="icon-comment-square oi" data-glyph="comment-square" aria-hidden="true"></i></a>',
          <% end %>
        }).addTo(reader);

        // Navigator widgets
        cozy.control.navigator({ region: 'bottom.navigator' }).addTo(reader);

        // Annotation widget checks and initialization
        <% if %w[leverpress].include? @subdomain %>
          var tm;
          function checkForAnnotator(cb, w) {
            if (!w) {
              w = window;
            }
            tm = setTimeout(function () {
              if (w && w.annotator) {
                clearTimeout(tm);
                cb();
              } else {
                checkForAnnotator(cb, w);
              }
            }, 100);
          }

          // the panel has to be created first
          $("body").addClass("panel-open panel-right");
          var $main = $(".cozy-module-main");
          var $panel = $('<div class="special-panel cozy-module-annotator"></div>').appendTo($main);

          // pass the reference to the panel
          var annotation_tool = new AnnotationTool({
            region: 'top.toolbar.left',
            $panel: $panel,
          })
          annotation_tool.addTo(reader);

        <% end %>

        <% if @monograph_presenter.webgl? %>
          open_panel();
        <% end %>
        
        // Initiate EPUB Reader
        reader.start(function() {
          <% if @monograph_presenter.webgl? %>
            fetch_poi();
          <% end %>
          <% if %w[leverpress].include? @subdomain %>
            var $hypothesis_panel = $(".hypothesis-panel");
            $hypothesis_panel.css({ display: 'block', height: '100%' });
            $panel.append($hypothesis_panel);
          <% end %>
        });
      }
    </script>
  </div>
  <%= render 'shared/ga' %>
<% end %>
<%= render template: 'layouts/boilerplate' %>
