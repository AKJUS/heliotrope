#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
puts "Loading environment"
require File.expand_path('../config/environment', __dir__)
require 'import'

# Valid selections for access rights.
# Note: This script doesn't handle the case of lease/embargo.
def visibility_choices
  { 'public' => Hydra::AccessControls::AccessRight::VISIBILITY_TEXT_VALUE_PUBLIC,
    'authenticated' => Hydra::AccessControls::AccessRight::VISIBILITY_TEXT_VALUE_AUTHENTICATED,
    'private' => Hydra::AccessControls::AccessRight::VISIBILITY_TEXT_VALUE_PRIVATE }
end

# Parse the the command line arguments
def parse_inputs(args) # rubocop:disable Metrics/CyclomaticComplexity, Metrics/PerceivedComplexity
  inputs = {}
  opts = OptionParser.new

  opts.on('-d DIR', 'Path to the directory where the CSV files are located. (always required)') do |dir|
    inputs[:root_dir] = dir
  end

  opts.on('-u [USER]', 'username (email) of the user to use as depositor of the content (defaults to batch user)') do |usr|
    inputs[:user_email] = usr
  end

  opts.on('-p PRESS', 'Subdomain of the Press that the monographs belong to. (required for new monograph)') do |press|
    inputs[:press] = press
  end

  opts.on("-v [VISIBILITY]", "The visibility level that the imported records will have.", "   Valid options are: #{visibility_choices.keys.inspect}") do |vis|
    vis = vis.downcase
    raise "Error: Invalid value for visibility: #{vis}" unless visibility_choices.include?(vis)
    inputs[:visibility] = visibility_choices.fetch(vis)
  end

  opts.on('-n [MONOGRAPH TITLE]', '--name', 'Set monograph title (will override monograph title in CSV file).') do |monograph_title|
    inputs[:monograph_title] = monograph_title
  end

  opts.on('-m [MONOGRAPH ID]', '--monograph_id', 'ID of existing monograph to which assets will be added, i.e. "reimporting". (required when reimporting)') do |monograph_id|
    inputs[:monograph_id] = monograph_id
    raise "This ID does not correspond to a pre-existing monograph" if Monograph.where(id: monograph_id).first.blank?
  end

  opts.on('-t [TEST]', '--test', 'Only test/validate the CSV data, do not import') do
    inputs[:test] = true
  end

  opts.on('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end

  opts.on('-q', '--quiet', 'Turn off interactive messages') do
    inputs[:quiet] = true
  end

  opts.parse!(args)

  if inputs[:monograph_id] && (inputs[:press] || inputs[:visibility] || inputs[:monograph_title])
    raise "Error: using -m or --monograph_id (i.e. reimporting) excludes -p, -v, and -n"
  end
  raise "Error: The CSV directory is required" unless inputs[:root_dir]
  raise "Error: The Press required for importing new monographs, i.e. *not* reimporting" unless inputs[:press] || inputs[:monograph_id]
  inputs
rescue StandardError => e
  puts e.message
  puts opts
  exit 1
end

# Read and validate inputs
options = parse_inputs(ARGV)

puts "Begin import"
importer = Import::Importer.new(root_dir: options[:root_dir],
                                user_email: options[:user_email],
                                press: options[:press],
                                visibility: options[:visibility],
                                monograph_title: options[:monograph_title],
                                monograph_id: options[:monograph_id],
                                quiet: options[:quiet])

importer.run(options[:test])

puts "Import finished"
