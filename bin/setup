#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

Dir.chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file.

  puts '== Installing dependencies =='
  system! 'gem install bundler --without production --conservative'
  system('bundle check') || system!('bundle install')

  # Install JavaScript dependencies if using Yarn
  # system('bin/yarn')

  puts "\n== Copying sample files =="
  files = ['secrets', 'database', 'analytics', 'role_map']
  files.each do |f|
    yml_name = "config/#{f}.yml"
    cp "#{yml_name}.sample", yml_name unless File.exist?(yml_name)
  end

  puts "\n== Copying sample databases =="
  files = ['keycard-development', 'keycard-test', 'checkpoint-development', 'checkpoint-test', 'checkpoint-production']
  files.each do |f|
    sqlite_name = "db/#{f}.sqlite3"
    cp "#{sqlite_name}.sample", sqlite_name unless File.exist?(sqlite_name)
  end

  puts "\n== Preparing database =="
  system! 'bin/rails db:setup'

  puts '== Creating ./public =='
  system! "bin/rails jekyll:deploy"

  require File.expand_path("#{APP_ROOT}/config/environment", __FILE__)
  if Rails.env == 'production'
    puts '== Installing production dependencies =='
    system! 'gem install bundler --conservative'
    system('bundle check') || system!('bundle install')
  end

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting application server =="
  system! 'bin/rails restart'
end
