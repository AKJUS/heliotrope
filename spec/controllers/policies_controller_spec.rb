# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PoliciesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Policy. As you add validations to Policy, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      agent_type: "agent_type",
      agent_id: "agent_id",
      agent_token: "agent_token",
      credential_type: "credential_type",
      credential_id: "credential_id",
      credential_token: "credential_token",
      resource_type: "resource_type",
      resource_id: "resource_id",
      resource_token: "resource_token",
      zone_id: "zone_id"
    }
  end
  let(:invalid_attributes) do
    {
      agent_type: "",
      agent_id: "",
      agent_token: "",
      credential_type: "",
      credential_id: "",
      credential_token: "",
      resource_type: "",
      resource_id: "",
      resource_token: "",
      zone_id: ""
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PoliciesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      _lessee = Policy.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
      expect(response).to render_template(:index)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      policy = Policy.create! valid_attributes
      get :show, params: { id: policy.to_param }, session: valid_session
      expect(response).to be_success
      expect(response).to render_template(:show)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
      expect(response).to render_template(:new)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      policy = Policy.create! valid_attributes
      get :edit, params: { id: policy.to_param }, session: valid_session
      expect(response).to be_success
      expect(response).to render_template(:edit)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Policy" do
        expect {
          post :create, params: { policy: valid_attributes }, session: valid_session
        }.to change(Policy, :count).by(1)
      end

      it "redirects to the created policy" do
        post :create, params: { policy: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Policy.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { policy: invalid_attributes }, session: valid_session
        expect(response).to be_success
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        {
          agent_type: "new_agent_type",
          agent_id: "new_agent_id",
          agent_token: "new_agent_token",
          credential_type: "new_credential_type",
          credential_id: "new_credential_id",
          credential_token: "new_credential_token",
          resource_type: "new_resource_type",
          resource_id: "new_resource_id",
          resource_token: "new_resource_token",
          zone_id: "new_zone_id"
        }
      end

      it "updates the requested policy" do
        policy = Policy.create! valid_attributes
        put :update, params: { id: policy.to_param, policy: new_attributes }, session: valid_session
        policy.reload
        expect(policy.agent_type).to eq("new_agent_type")
        expect(policy.agent_id).to eq("new_agent_id")
        expect(policy.agent_token).to eq("new_agent_token")
        expect(policy.credential_type).to eq("new_credential_type")
        expect(policy.credential_id).to eq("new_credential_id")
        expect(policy.credential_token).to eq("new_credential_token")
        expect(policy.resource_type).to eq("new_resource_type")
        expect(policy.resource_id).to eq("new_resource_id")
        expect(policy.resource_token).to eq("new_resource_token")
        expect(policy.zone_id).to eq("new_zone_id")
      end

      it "redirects to the policy" do
        policy = Policy.create! valid_attributes
        put :update, params: { id: policy.to_param, policy: valid_attributes }, session: valid_session
        expect(response).to redirect_to(policy)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        policy = Policy.create! valid_attributes
        put :update, params: { id: policy.to_param, policy: invalid_attributes }, session: valid_session
        expect(response).to be_success
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested policy" do
      policy = Policy.create! valid_attributes
      expect {
        delete :destroy, params: { id: policy.to_param }, session: valid_session
      }.to change(Policy, :count).by(-1)
    end

    it "redirects to the policies list" do
      policy = Policy.create! valid_attributes
      delete :destroy, params: { id: policy.to_param }, session: valid_session
      expect(response).to redirect_to(policies_url)
    end
  end
end
